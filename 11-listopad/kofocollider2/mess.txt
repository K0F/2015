
////////////////////////////////////////////////////////////////
/*
   String sketchAbsPath = "/sketchBook/2015/01-leden/kofocollider";

////////////////////////////////////////////////////////////////

void init(){

execute("rm /tmp/lang ; mkfifo /tmp/lang ; chmod 775 /tmp/lang");
execute("pkill scsynth");
delay(250);
execute("tail -f /tmp/lang | supercolliderJs");
delay(500);

frame.removeNotify();
frame.setUndecorated(true);
frame.addNotify();

super.init();
}
 */


////////////////////////////////////////////////////////////////
/*
   class Executer implements Runnable{
   String command;

   Executer(String _command){
   command = _command;
   }

   void run(){

   String s = null;

   try{

   Runtime runtime = Runtime.getRuntime();

   String cmd[] = {"/bin/sh","-c",command};
   String env[] = {"PATH=/bin/:/usr/bin/:/usr/local/bin/","DISPLAY=:0.0","SHELL=/bin/bash","USER=kof"};

   Process p = runtime.exec(cmd);

   BufferedReader stdInput = new BufferedReader(new
   InputStreamReader(p.getInputStream()));

   BufferedReader stdError = new BufferedReader(new
   InputStreamReader(p.getErrorStream()));

    // read the output from the command
    //System.out.println("Here is the standard output of the command:\n");
    while ((s = stdInput.readLine()) != null) {
    System.out.println(s);
    }

    // read any errors from the attempted command
    //System.out.println("Here is the standard error of the command (if any):\n");
    while ((s = stdError.readLine()) != null) {
    System.out.println(s);
    }

    }
    catch (IOException e) {
    System.out.println("exception happened - here's what I know: ");
    e.printStackTrace();
    }
    }
    }
 */
////////////////////////////////////////////////////////////////
///// some functions global ////////////////////////////////////
////////////////////////////////////////////////////////////////


/*
   void execute(String _in){
   Runnable runnable = new Executer(_in);
   Thread thread = new Thread(runnable);
   thread.start();
   }

   void sclang(String _in){
   execute("echo -n \""+_in+"\" | scall");
   }


   void exit(){
   sclang("s.freeAll");
   execute("pkill scsynth");
   super.exit();
   }
 */
